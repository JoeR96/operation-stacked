version: '3.8'
services:
  dashboard:
    build:
      context: ../../
      dockerfile: apps/operation-stacked-dashboard/Dockerfile
    ports:
      - "3000:3000"
    environment:
      WORKOUT_API: ${WORKOUT_API}
      AUTH_API: ${AUTH_API}

  workout:
    build:
      context: ../OperationStacked
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      OperationStackedConnectionString: "server=db;database=${MYSQL_DATABASE};user=${MYSQL_USER};password=${MYSQL_PASSWORD};"
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - db


  auth:
    build:
      context: ../OperationStackedAuth  # Adjust context to the directory containing the Dockerfile
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}

  db:
    image: mysql:latest
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - db-data:/var/lib/mysql

  e2e-tests:
    build:
      context: ../../
      dockerfile: apps/operation-stacked-dashboard-e2e/Dockerfile

    depends_on:
      - dashboard
      - workout
      - auth
    command: npm run test:e2e

volumes:
  db-data:

networks:
  default:
    driver: bridge
