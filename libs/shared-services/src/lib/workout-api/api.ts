/* tslint:disable */
/* eslint-disable */
/**
 * Operation Stacked Workout
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.317
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ActiveSessionResponse
 */
export interface ActiveSessionResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ActiveSessionResponse
     */
    'hasActiveSessio'?: boolean;
    /**
     * 
     * @type {Session}
     * @memberof ActiveSessionResponse
     */
    'session'?: Session;
}
/**
 * 
 * @export
 * @interface AddExerciseToSessionRequest
 */
export interface AddExerciseToSessionRequest {
    /**
     * 
     * @type {string}
     * @memberof AddExerciseToSessionRequest
     */
    'SessionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddExerciseToSessionRequest
     */
    'ExerciseId'?: string;
}
/**
 * 
 * @export
 * @interface AddSetRequest
 */
export interface AddSetRequest {
    /**
     * 
     * @type {string}
     * @memberof AddSetRequest
     */
    'SessionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddSetRequest
     */
    'ExerciseId'?: string;
    /**
     * 
     * @type {number}
     * @memberof AddSetRequest
     */
    'Reps'?: number;
    /**
     * 
     * @type {number}
     * @memberof AddSetRequest
     */
    'Weight'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Category = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5
} as const;

export type Category = typeof Category[keyof typeof Category];


/**
 * 
 * @export
 * @interface CompleteExerciseRequest
 */
export interface CompleteExerciseRequest {
    /**
     * 
     * @type {string}
     * @memberof CompleteExerciseRequest
     */
    'ExerciseId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompleteExerciseRequest
     */
    'LinearProgressionExerciseId'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof CompleteExerciseRequest
     */
    'Reps'?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof CompleteExerciseRequest
     */
    'Sets'?: number;
    /**
     * 
     * @type {ExerciseTemplate}
     * @memberof CompleteExerciseRequest
     */
    'Template'?: ExerciseTemplate;
    /**
     * 
     * @type {number}
     * @memberof CompleteExerciseRequest
     */
    'WorkingWeight'?: number;
    /**
     * 
     * @type {string}
     * @memberof CompleteExerciseRequest
     */
    'DummyTime'?: string;
}


/**
 * 
 * @export
 * @interface CreateEquipmentStackRequest
 */
export interface CreateEquipmentStackRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateEquipmentStackRequest
     */
    'StartWeight'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateEquipmentStackRequest
     */
    'InitialIncrements'?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof CreateEquipmentStackRequest
     */
    'IncrementValue'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateEquipmentStackRequest
     */
    'IncrementCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateEquipmentStackRequest
     */
    'EquipmentStackKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateEquipmentStackRequest
     */
    'UserID'?: string;
}
/**
 * 
 * @export
 * @interface CreateExerciseRequest
 */
export interface CreateExerciseRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateExerciseRequest
     */
    'ExerciseName'?: string | null;
    /**
     * 
     * @type {Category}
     * @memberof CreateExerciseRequest
     */
    'Category'?: Category;
    /**
     * 
     * @type {EquipmentType}
     * @memberof CreateExerciseRequest
     */
    'EquipmentType'?: EquipmentType;
    /**
     * 
     * @type {string}
     * @memberof CreateExerciseRequest
     */
    'UserId'?: string;
}


/**
 * 
 * @export
 * @interface CreateLinearProgressionExerciseRequest
 */
export interface CreateLinearProgressionExerciseRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateLinearProgressionExerciseRequest
     */
    'MinimumReps'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateLinearProgressionExerciseRequest
     */
    'MaximumReps'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateLinearProgressionExerciseRequest
     */
    'TargetSets'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateLinearProgressionExerciseRequest
     */
    'WeightIndex'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateLinearProgressionExerciseRequest
     */
    'WeightProgression'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateLinearProgressionExerciseRequest
     */
    'AttemptsBeforeDeload'?: number;
    /**
     * 
     * @type {EquipmentType}
     * @memberof CreateLinearProgressionExerciseRequest
     */
    'EquipmentType'?: EquipmentType;
    /**
     * 
     * @type {EquipmentStackKey}
     * @memberof CreateLinearProgressionExerciseRequest
     */
    'EquipmentStackKey'?: EquipmentStackKey;
    /**
     * 
     * @type {CreateEquipmentStackRequest}
     * @memberof CreateLinearProgressionExerciseRequest
     */
    'EquipmentStack'?: CreateEquipmentStackRequest;
    /**
     * 
     * @type {CreateWorkoutExerciseRequest}
     * @memberof CreateLinearProgressionExerciseRequest
     */
    'WorkoutExercise'?: CreateWorkoutExerciseRequest;
    /**
     * 
     * @type {number}
     * @memberof CreateLinearProgressionExerciseRequest
     */
    'StartingWeight'?: number | null;
}


/**
 * 
 * @export
 * @interface CreateUser
 */
export interface CreateUser {
    /**
     * 
     * @type {string}
     * @memberof CreateUser
     */
    'CognitoUserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUser
     */
    'UserName'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateWorkoutExerciseRequest
 */
export interface CreateWorkoutExerciseRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateWorkoutExerciseRequest
     */
    'LiftDay'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateWorkoutExerciseRequest
     */
    'LiftOrder'?: number;
    /**
     * 
     * @type {CreateExerciseRequest}
     * @memberof CreateWorkoutExerciseRequest
     */
    'Exercise'?: CreateExerciseRequest;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkoutExerciseRequest
     */
    'ExerciseId'?: string;
    /**
     * 
     * @type {ExerciseTemplate}
     * @memberof CreateWorkoutExerciseRequest
     */
    'Template'?: ExerciseTemplate;
    /**
     * 
     * @type {number}
     * @memberof CreateWorkoutExerciseRequest
     */
    'RestTimer'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkoutExerciseRequest
     */
    'WorkoutId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkoutExerciseRequest
     */
    'EquipmentStackId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateWorkoutExerciseRequest
     */
    'WeightProgression'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateWorkoutExerciseRequest
     */
    'MinimumReps'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateWorkoutExerciseRequest
     */
    'MaximumReps'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateWorkoutExerciseRequest
     */
    'Sets'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateWorkoutExerciseRequest
     */
    'AttemptsBeforeDeload'?: number;
}


/**
 * 
 * @export
 * @interface CreateWorkoutRequest
 */
export interface CreateWorkoutRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateWorkoutRequest
     */
    'UserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkoutRequest
     */
    'WorkoutName'?: string | null;
    /**
     * 
     * @type {Array<CreateLinearProgressionExerciseRequest>}
     * @memberof CreateWorkoutRequest
     */
    'Exercises'?: Array<CreateLinearProgressionExerciseRequest> | null;
}
/**
 * 
 * @export
 * @interface DeleteSetRequest
 */
export interface DeleteSetRequest {
    /**
     * 
     * @type {string}
     * @memberof DeleteSetRequest
     */
    'SessionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteSetRequest
     */
    'ExerciseId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteSetRequest
     */
    'SetId'?: string;
}
/**
 * 
 * @export
 * @interface EquipmentStack
 */
export interface EquipmentStack {
    /**
     * 
     * @type {string}
     * @memberof EquipmentStack
     */
    'Id'?: string;
    /**
     * 
     * @type {number}
     * @memberof EquipmentStack
     */
    'StartWeight'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof EquipmentStack
     */
    'InitialIncrements'?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof EquipmentStack
     */
    'IncrementValue'?: number;
    /**
     * 
     * @type {number}
     * @memberof EquipmentStack
     */
    'IncrementCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof EquipmentStack
     */
    'Name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EquipmentStack
     */
    'UserID'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const EquipmentStackKey = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type EquipmentStackKey = typeof EquipmentStackKey[keyof typeof EquipmentStackKey];


/**
 * 
 * @export
 * @interface EquipmentStackResponse
 */
export interface EquipmentStackResponse {
    /**
     * 
     * @type {EquipmentStack}
     * @memberof EquipmentStackResponse
     */
    'Stack'?: EquipmentStack;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const EquipmentType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5
} as const;

export type EquipmentType = typeof EquipmentType[keyof typeof EquipmentType];


/**
 * 
 * @export
 * @interface Exercise
 */
export interface Exercise {
    /**
     * 
     * @type {string}
     * @memberof Exercise
     */
    'Id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Exercise
     */
    'ExerciseName': string;
    /**
     * 
     * @type {Category}
     * @memberof Exercise
     */
    'Category': Category;
    /**
     * 
     * @type {EquipmentType}
     * @memberof Exercise
     */
    'EquipmentType': EquipmentType;
    /**
     * 
     * @type {string}
     * @memberof Exercise
     */
    'UserId': string;
    /**
     * 
     * @type {Array<ExerciseHistory>}
     * @memberof Exercise
     */
    'ExerciseHistories'?: Array<ExerciseHistory> | null;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const ExerciseCompletedStatus = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6
} as const;

export type ExerciseCompletedStatus = typeof ExerciseCompletedStatus[keyof typeof ExerciseCompletedStatus];


/**
 * 
 * @export
 * @interface ExerciseCompletionResult
 */
export interface ExerciseCompletionResult {
    /**
     * 
     * @type {ExerciseCompletedStatus}
     * @memberof ExerciseCompletionResult
     */
    'Status'?: ExerciseCompletedStatus;
    /**
     * 
     * @type {LinearProgressionExercise}
     * @memberof ExerciseCompletionResult
     */
    'exercise'?: LinearProgressionExercise;
}


/**
 * 
 * @export
 * @interface ExerciseDTO
 */
export interface ExerciseDTO {
    /**
     * 
     * @type {string}
     * @memberof ExerciseDTO
     */
    'Id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseDTO
     */
    'ExerciseName'?: string | null;
    /**
     * 
     * @type {Category}
     * @memberof ExerciseDTO
     */
    'Category'?: Category;
    /**
     * 
     * @type {EquipmentType}
     * @memberof ExerciseDTO
     */
    'EquipmentType'?: EquipmentType;
}


/**
 * 
 * @export
 * @interface ExerciseDto
 */
export interface ExerciseDto {
    /**
     * 
     * @type {string}
     * @memberof ExerciseDto
     */
    'Id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseDto
     */
    'ExerciseName'?: string | null;
    /**
     * 
     * @type {Category}
     * @memberof ExerciseDto
     */
    'Category'?: Category;
    /**
     * 
     * @type {EquipmentType}
     * @memberof ExerciseDto
     */
    'EquipmentType'?: EquipmentType;
    /**
     * 
     * @type {string}
     * @memberof ExerciseDto
     */
    'UserId'?: string;
}


/**
 * 
 * @export
 * @interface ExerciseHistory
 */
export interface ExerciseHistory {
    /**
     * 
     * @type {string}
     * @memberof ExerciseHistory
     */
    'Id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseHistory
     */
    'CompletedDate': string;
    /**
     * 
     * @type {number}
     * @memberof ExerciseHistory
     */
    'CompletedSets': number;
    /**
     * 
     * @type {string}
     * @memberof ExerciseHistory
     */
    'CompletedReps': string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseHistory
     */
    'ExerciseId': string;
    /**
     * 
     * @type {Exercise}
     * @memberof ExerciseHistory
     */
    'Exercise'?: Exercise;
    /**
     * 
     * @type {string}
     * @memberof ExerciseHistory
     */
    'TemplateExerciseId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ExerciseHistory
     */
    'WorkingWeight'?: number;
}
/**
 * 
 * @export
 * @interface ExerciseHistoryDTO
 */
export interface ExerciseHistoryDTO {
    /**
     * 
     * @type {string}
     * @memberof ExerciseHistoryDTO
     */
    'Id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseHistoryDTO
     */
    'CompletedDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExerciseHistoryDTO
     */
    'CompletedSets'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExerciseHistoryDTO
     */
    'CompletedReps'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExerciseHistoryDTO
     */
    'ExerciseId'?: string;
    /**
     * 
     * @type {ExerciseDTO}
     * @memberof ExerciseHistoryDTO
     */
    'Exercise'?: ExerciseDTO;
    /**
     * 
     * @type {string}
     * @memberof ExerciseHistoryDTO
     */
    'TemplateExerciseId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ExerciseHistoryDTO
     */
    'WorkingWeight'?: number;
}
/**
 * 
 * @export
 * @interface ExerciseHistoryDTOPaginatedResult
 */
export interface ExerciseHistoryDTOPaginatedResult {
    /**
     * 
     * @type {Array<ExerciseHistoryDTO>}
     * @memberof ExerciseHistoryDTOPaginatedResult
     */
    'Items'?: Array<ExerciseHistoryDTO> | null;
    /**
     * 
     * @type {number}
     * @memberof ExerciseHistoryDTOPaginatedResult
     */
    'TotalCount'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ExerciseTemplate = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type ExerciseTemplate = typeof ExerciseTemplate[keyof typeof ExerciseTemplate];


/**
 * 
 * @export
 * @interface GetExerciseResult
 */
export interface GetExerciseResult {
    /**
     * 
     * @type {Exercise}
     * @memberof GetExerciseResult
     */
    'Exercises'?: Exercise;
}
/**
 * 
 * @export
 * @interface GetWorkoutResult
 */
export interface GetWorkoutResult {
    /**
     * 
     * @type {Array<WorkoutExerciseDto>}
     * @memberof GetWorkoutResult
     */
    'Exercises'?: Array<WorkoutExerciseDto> | null;
    /**
     * 
     * @type {number}
     * @memberof GetWorkoutResult
     */
    'TotalCount'?: number | null;
}
/**
 * 
 * @export
 * @interface LinearProgressionExercise
 */
export interface LinearProgressionExercise {
    /**
     * 
     * @type {string}
     * @memberof LinearProgressionExercise
     */
    'WorkoutExerciseId'?: string;
    /**
     * 
     * @type {WorkoutExercise}
     * @memberof LinearProgressionExercise
     */
    'WorkoutExercise'?: WorkoutExercise;
    /**
     * 
     * @type {string}
     * @memberof LinearProgressionExercise
     */
    'Id'?: string;
    /**
     * 
     * @type {number}
     * @memberof LinearProgressionExercise
     */
    'CurrentAttempt'?: number;
    /**
     * 
     * @type {string}
     * @memberof LinearProgressionExercise
     */
    'ParentId'?: string;
    /**
     * 
     * @type {number}
     * @memberof LinearProgressionExercise
     */
    'LiftWeek'?: number;
    /**
     * 
     * @type {number}
     * @memberof LinearProgressionExercise
     */
    'WorkingWeight'?: number;
    /**
     * 
     * @type {number}
     * @memberof LinearProgressionExercise
     */
    'WeightIndex'?: number;
}
/**
 * 
 * @export
 * @interface LinearProgressionExerciseDto
 */
export interface LinearProgressionExerciseDto {
    /**
     * 
     * @type {string}
     * @memberof LinearProgressionExerciseDto
     */
    'WorkoutExerciseId'?: string;
    /**
     * 
     * @type {string}
     * @memberof LinearProgressionExerciseDto
     */
    'Id'?: string;
    /**
     * 
     * @type {number}
     * @memberof LinearProgressionExerciseDto
     */
    'CurrentAttempt'?: number;
    /**
     * 
     * @type {string}
     * @memberof LinearProgressionExerciseDto
     */
    'ParentId'?: string;
    /**
     * 
     * @type {number}
     * @memberof LinearProgressionExerciseDto
     */
    'LiftWeek'?: number;
    /**
     * 
     * @type {number}
     * @memberof LinearProgressionExerciseDto
     */
    'WorkingWeight'?: number;
    /**
     * 
     * @type {number}
     * @memberof LinearProgressionExerciseDto
     */
    'WeightIndex'?: number;
}
/**
 * 
 * @export
 * @interface ModelSet
 */
export interface ModelSet {
    /**
     * 
     * @type {string}
     * @memberof ModelSet
     */
    'Id'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelSet
     */
    'Reps'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelSet
     */
    'Weight'?: number;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface Session
 */
export interface Session {
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    'Id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    'UserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    'SessionStartDateTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    'SessionName'?: string | null;
    /**
     * 
     * @type {Array<SessionExercise>}
     * @memberof Session
     */
    'SessionExercises'?: Array<SessionExercise> | null;
    /**
     * 
     * @type {boolean}
     * @memberof Session
     */
    'IsActive'?: boolean;
}
/**
 * 
 * @export
 * @interface SessionCreatedResponse
 */
export interface SessionCreatedResponse {
    /**
     * 
     * @type {string}
     * @memberof SessionCreatedResponse
     */
    'sessionName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SessionCreatedResponse
     */
    'SessionCreatedTime'?: string;
}
/**
 * 
 * @export
 * @interface SessionExercise
 */
export interface SessionExercise {
    /**
     * 
     * @type {string}
     * @memberof SessionExercise
     */
    'Id'?: string;
    /**
     * 
     * @type {Session}
     * @memberof SessionExercise
     */
    'Session'?: Session;
    /**
     * 
     * @type {string}
     * @memberof SessionExercise
     */
    'SessionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionExercise
     */
    'ExerciseId'?: string;
    /**
     * 
     * @type {Exercise}
     * @memberof SessionExercise
     */
    'Exercise'?: Exercise;
    /**
     * 
     * @type {Array<Set>}
     * @memberof SessionExercise
     */
    'Sets'?: Array<Set> | null;
}
/**
 * 
 * @export
 * @interface SetUsernameRequest
 */
export interface SetUsernameRequest {
    /**
     * 
     * @type {string}
     * @memberof SetUsernameRequest
     */
    'UserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SetUsernameRequest
     */
    'Username'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateExerciseRequest
 */
export interface UpdateExerciseRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateExerciseRequest
     */
    'MinimumReps'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateExerciseRequest
     */
    'MaximumReps'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateExerciseRequest
     */
    'Sets'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateExerciseRequest
     */
    'WorkingWeight'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateExerciseRequest
     */
    'Id'?: string;
}
/**
 * 
 * @export
 * @interface UpdateWeekAndDayRequest
 */
export interface UpdateWeekAndDayRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateWeekAndDayRequest
     */
    'Week'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateWeekAndDayRequest
     */
    'Day'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateWeekAndDayRequest
     */
    'UserId'?: string;
}
/**
 * 
 * @export
 * @interface WeekAndDayResponse
 */
export interface WeekAndDayResponse {
    /**
     * 
     * @type {number}
     * @memberof WeekAndDayResponse
     */
    'Week'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeekAndDayResponse
     */
    'Day'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeekAndDayResponse
     */
    'workoutDaysInWeek'?: number;
}
/**
 * 
 * @export
 * @interface Workout
 */
export interface Workout {
    /**
     * 
     * @type {string}
     * @memberof Workout
     */
    'Id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Workout
     */
    'UserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Workout
     */
    'WorkoutName'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WorkoutCreatedStatus = {
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type WorkoutCreatedStatus = typeof WorkoutCreatedStatus[keyof typeof WorkoutCreatedStatus];


/**
 * 
 * @export
 * @interface WorkoutCreationResult
 */
export interface WorkoutCreationResult {
    /**
     * 
     * @type {WorkoutCreatedStatus}
     * @memberof WorkoutCreationResult
     */
    'Status'?: WorkoutCreatedStatus;
    /**
     * 
     * @type {Array<LinearProgressionExercise>}
     * @memberof WorkoutCreationResult
     */
    'Exercises'?: Array<LinearProgressionExercise> | null;
}


/**
 * 
 * @export
 * @interface WorkoutExercise
 */
export interface WorkoutExercise {
    /**
     * 
     * @type {string}
     * @memberof WorkoutExercise
     */
    'Id'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutExercise
     */
    'WorkoutId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutExercise
     */
    'ExerciseId'?: string;
    /**
     * 
     * @type {Exercise}
     * @memberof WorkoutExercise
     */
    'Exercise'?: Exercise;
    /**
     * 
     * @type {Array<LinearProgressionExercise>}
     * @memberof WorkoutExercise
     */
    'LinearProgressionExercises'?: Array<LinearProgressionExercise> | null;
    /**
     * 
     * @type {ExerciseTemplate}
     * @memberof WorkoutExercise
     */
    'Template'?: ExerciseTemplate;
    /**
     * 
     * @type {number}
     * @memberof WorkoutExercise
     */
    'LiftDay'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutExercise
     */
    'LiftOrder'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof WorkoutExercise
     */
    'Completed'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof WorkoutExercise
     */
    'RestTimer'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutExercise
     */
    'MinimumReps'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutExercise
     */
    'MaximumReps'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutExercise
     */
    'Sets'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutExercise
     */
    'WeightProgression'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutExercise
     */
    'AttemptsBeforeDeload'?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkoutExercise
     */
    'EquipmentStackId'?: string;
}


/**
 * 
 * @export
 * @interface WorkoutExerciseDto
 */
export interface WorkoutExerciseDto {
    /**
     * 
     * @type {string}
     * @memberof WorkoutExerciseDto
     */
    'Id'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutExerciseDto
     */
    'WorkoutId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutExerciseDto
     */
    'ExerciseId'?: string;
    /**
     * 
     * @type {ExerciseDto}
     * @memberof WorkoutExerciseDto
     */
    'Exercise'?: ExerciseDto;
    /**
     * 
     * @type {Array<LinearProgressionExerciseDto>}
     * @memberof WorkoutExerciseDto
     */
    'LinearProgressionExercises'?: Array<LinearProgressionExerciseDto> | null;
    /**
     * 
     * @type {ExerciseTemplate}
     * @memberof WorkoutExerciseDto
     */
    'Template'?: ExerciseTemplate;
    /**
     * 
     * @type {number}
     * @memberof WorkoutExerciseDto
     */
    'LiftDay'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutExerciseDto
     */
    'LiftOrder'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof WorkoutExerciseDto
     */
    'Completed'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof WorkoutExerciseDto
     */
    'RestTimer'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutExerciseDto
     */
    'MinimumReps'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutExerciseDto
     */
    'MaximumReps'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutExerciseDto
     */
    'Sets'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutExerciseDto
     */
    'WeightProgression'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutExerciseDto
     */
    'AttemptsBeforeDeload'?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkoutExerciseDto
     */
    'EquipmentStackId'?: string;
}



/**
 * EquipmentStackApi - axios parameter creator
 * @export
 */
export const EquipmentStackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateEquipmentStackRequest} [createEquipmentStackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        equipmentStackCreatePost: async (createEquipmentStackRequest?: CreateEquipmentStackRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/equipment-stack/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEquipmentStackRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} equipmentStackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        equipmentStackEquipmentStackIdDelete: async (equipmentStackId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'equipmentStackId' is not null or undefined
            assertParamExists('equipmentStackEquipmentStackIdDelete', 'equipmentStackId', equipmentStackId)
            const localVarPath = `/equipment-stack/{equipmentStackId}`
                .replace(`{${"equipmentStackId"}}`, encodeURIComponent(String(equipmentStackId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} equipmentStackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        equipmentStackEquipmentStackIdGet: async (equipmentStackId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'equipmentStackId' is not null or undefined
            assertParamExists('equipmentStackEquipmentStackIdGet', 'equipmentStackId', equipmentStackId)
            const localVarPath = `/equipment-stack/{equipmentStackId}`
                .replace(`{${"equipmentStackId"}}`, encodeURIComponent(String(equipmentStackId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        equipmentStackUserIdAllGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('equipmentStackUserIdAllGet', 'userId', userId)
            const localVarPath = `/equipment-stack/{userId}/all`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EquipmentStackApi - functional programming interface
 * @export
 */
export const EquipmentStackApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EquipmentStackApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateEquipmentStackRequest} [createEquipmentStackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async equipmentStackCreatePost(createEquipmentStackRequest?: CreateEquipmentStackRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EquipmentStackResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.equipmentStackCreatePost(createEquipmentStackRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EquipmentStackApi.equipmentStackCreatePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} equipmentStackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async equipmentStackEquipmentStackIdDelete(equipmentStackId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.equipmentStackEquipmentStackIdDelete(equipmentStackId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EquipmentStackApi.equipmentStackEquipmentStackIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} equipmentStackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async equipmentStackEquipmentStackIdGet(equipmentStackId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EquipmentStackResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.equipmentStackEquipmentStackIdGet(equipmentStackId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EquipmentStackApi.equipmentStackEquipmentStackIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async equipmentStackUserIdAllGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EquipmentStackResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.equipmentStackUserIdAllGet(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EquipmentStackApi.equipmentStackUserIdAllGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * EquipmentStackApi - factory interface
 * @export
 */
export const EquipmentStackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EquipmentStackApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateEquipmentStackRequest} [createEquipmentStackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        equipmentStackCreatePost(createEquipmentStackRequest?: CreateEquipmentStackRequest, options?: any): AxiosPromise<EquipmentStackResponse> {
            return localVarFp.equipmentStackCreatePost(createEquipmentStackRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} equipmentStackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        equipmentStackEquipmentStackIdDelete(equipmentStackId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.equipmentStackEquipmentStackIdDelete(equipmentStackId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} equipmentStackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        equipmentStackEquipmentStackIdGet(equipmentStackId: string, options?: any): AxiosPromise<EquipmentStackResponse> {
            return localVarFp.equipmentStackEquipmentStackIdGet(equipmentStackId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        equipmentStackUserIdAllGet(userId: string, options?: any): AxiosPromise<Array<EquipmentStackResponse>> {
            return localVarFp.equipmentStackUserIdAllGet(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EquipmentStackApi - object-oriented interface
 * @export
 * @class EquipmentStackApi
 * @extends {BaseAPI}
 */
export class EquipmentStackApi extends BaseAPI {
    /**
     * 
     * @param {CreateEquipmentStackRequest} [createEquipmentStackRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentStackApi
     */
    public equipmentStackCreatePost(createEquipmentStackRequest?: CreateEquipmentStackRequest, options?: RawAxiosRequestConfig) {
        return EquipmentStackApiFp(this.configuration).equipmentStackCreatePost(createEquipmentStackRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} equipmentStackId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentStackApi
     */
    public equipmentStackEquipmentStackIdDelete(equipmentStackId: string, options?: RawAxiosRequestConfig) {
        return EquipmentStackApiFp(this.configuration).equipmentStackEquipmentStackIdDelete(equipmentStackId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} equipmentStackId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentStackApi
     */
    public equipmentStackEquipmentStackIdGet(equipmentStackId: string, options?: RawAxiosRequestConfig) {
        return EquipmentStackApiFp(this.configuration).equipmentStackEquipmentStackIdGet(equipmentStackId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentStackApi
     */
    public equipmentStackUserIdAllGet(userId: string, options?: RawAxiosRequestConfig) {
        return EquipmentStackApiFp(this.configuration).equipmentStackUserIdAllGet(userId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExerciseApi - axios parameter creator
 * @export
 */
export const ExerciseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<CreateExerciseRequest>} [createExerciseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseCreateExercisesPost: async (createExerciseRequest?: Array<CreateExerciseRequest>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exercise/CreateExercises`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createExerciseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseExerciseIdDeleteDelete: async (exerciseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciseId' is not null or undefined
            assertParamExists('exerciseExerciseIdDeleteDelete', 'exerciseId', exerciseId)
            const localVarPath = `/exercise/{exerciseId}/delete`
                .replace(`{${"exerciseId"}}`, encodeURIComponent(String(exerciseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseExerciseIdGet: async (exerciseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciseId' is not null or undefined
            assertParamExists('exerciseExerciseIdGet', 'exerciseId', exerciseId)
            const localVarPath = `/exercise/{exerciseId}`
                .replace(`{${"exerciseId"}}`, encodeURIComponent(String(exerciseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseUserIdAllGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('exerciseUserIdAllGet', 'userId', userId)
            const localVarPath = `/exercise/{userId}/all`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseUserIdDeleteAllDelete: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('exerciseUserIdDeleteAllDelete', 'userId', userId)
            const localVarPath = `/exercise/{userId}/delete-all`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseUserIdGenerateBasicExercisesGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('exerciseUserIdGenerateBasicExercisesGet', 'userId', userId)
            const localVarPath = `/exercise/{userId}/generate-basic-exercises`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseWithHistoriesExerciseIdGet: async (exerciseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciseId' is not null or undefined
            assertParamExists('exerciseWithHistoriesExerciseIdGet', 'exerciseId', exerciseId)
            const localVarPath = `/exercise/with-histories/{exerciseId}`
                .replace(`{${"exerciseId"}}`, encodeURIComponent(String(exerciseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExerciseApi - functional programming interface
 * @export
 */
export const ExerciseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExerciseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Array<CreateExerciseRequest>} [createExerciseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exerciseCreateExercisesPost(createExerciseRequest?: Array<CreateExerciseRequest>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Exercise>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exerciseCreateExercisesPost(createExerciseRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExerciseApi.exerciseCreateExercisesPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exerciseExerciseIdDeleteDelete(exerciseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exerciseExerciseIdDeleteDelete(exerciseId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExerciseApi.exerciseExerciseIdDeleteDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exerciseExerciseIdGet(exerciseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetExerciseResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exerciseExerciseIdGet(exerciseId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExerciseApi.exerciseExerciseIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exerciseUserIdAllGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExerciseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exerciseUserIdAllGet(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExerciseApi.exerciseUserIdAllGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exerciseUserIdDeleteAllDelete(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exerciseUserIdDeleteAllDelete(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExerciseApi.exerciseUserIdDeleteAllDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exerciseUserIdGenerateBasicExercisesGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exerciseUserIdGenerateBasicExercisesGet(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExerciseApi.exerciseUserIdGenerateBasicExercisesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exerciseWithHistoriesExerciseIdGet(exerciseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Exercise>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exerciseWithHistoriesExerciseIdGet(exerciseId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExerciseApi.exerciseWithHistoriesExerciseIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ExerciseApi - factory interface
 * @export
 */
export const ExerciseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExerciseApiFp(configuration)
    return {
        /**
         * 
         * @param {Array<CreateExerciseRequest>} [createExerciseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseCreateExercisesPost(createExerciseRequest?: Array<CreateExerciseRequest>, options?: any): AxiosPromise<Array<Exercise>> {
            return localVarFp.exerciseCreateExercisesPost(createExerciseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseExerciseIdDeleteDelete(exerciseId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.exerciseExerciseIdDeleteDelete(exerciseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseExerciseIdGet(exerciseId: string, options?: any): AxiosPromise<GetExerciseResult> {
            return localVarFp.exerciseExerciseIdGet(exerciseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseUserIdAllGet(userId: string, options?: any): AxiosPromise<Array<ExerciseDto>> {
            return localVarFp.exerciseUserIdAllGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseUserIdDeleteAllDelete(userId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.exerciseUserIdDeleteAllDelete(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseUserIdGenerateBasicExercisesGet(userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.exerciseUserIdGenerateBasicExercisesGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseWithHistoriesExerciseIdGet(exerciseId: string, options?: any): AxiosPromise<Exercise> {
            return localVarFp.exerciseWithHistoriesExerciseIdGet(exerciseId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExerciseApi - object-oriented interface
 * @export
 * @class ExerciseApi
 * @extends {BaseAPI}
 */
export class ExerciseApi extends BaseAPI {
    /**
     * 
     * @param {Array<CreateExerciseRequest>} [createExerciseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseApi
     */
    public exerciseCreateExercisesPost(createExerciseRequest?: Array<CreateExerciseRequest>, options?: RawAxiosRequestConfig) {
        return ExerciseApiFp(this.configuration).exerciseCreateExercisesPost(createExerciseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} exerciseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseApi
     */
    public exerciseExerciseIdDeleteDelete(exerciseId: string, options?: RawAxiosRequestConfig) {
        return ExerciseApiFp(this.configuration).exerciseExerciseIdDeleteDelete(exerciseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} exerciseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseApi
     */
    public exerciseExerciseIdGet(exerciseId: string, options?: RawAxiosRequestConfig) {
        return ExerciseApiFp(this.configuration).exerciseExerciseIdGet(exerciseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseApi
     */
    public exerciseUserIdAllGet(userId: string, options?: RawAxiosRequestConfig) {
        return ExerciseApiFp(this.configuration).exerciseUserIdAllGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseApi
     */
    public exerciseUserIdDeleteAllDelete(userId: string, options?: RawAxiosRequestConfig) {
        return ExerciseApiFp(this.configuration).exerciseUserIdDeleteAllDelete(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseApi
     */
    public exerciseUserIdGenerateBasicExercisesGet(userId: string, options?: RawAxiosRequestConfig) {
        return ExerciseApiFp(this.configuration).exerciseUserIdGenerateBasicExercisesGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} exerciseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseApi
     */
    public exerciseWithHistoriesExerciseIdGet(exerciseId: string, options?: RawAxiosRequestConfig) {
        return ExerciseApiFp(this.configuration).exerciseWithHistoriesExerciseIdGet(exerciseId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExerciseHistoryApi - axios parameter creator
 * @export
 */
export const ExerciseHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allPost: async (requestBody?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost: async (body?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseHistoryExerciseIdGet: async (exerciseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciseId' is not null or undefined
            assertParamExists('exerciseHistoryExerciseIdGet', 'exerciseId', exerciseId)
            const localVarPath = `/exercise-history/{exerciseId}`
                .replace(`{${"exerciseId"}}`, encodeURIComponent(String(exerciseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseHistoryPost: async (pageIndex?: number, pageSize?: number, requestBody?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exercise-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExerciseHistoryApi - functional programming interface
 * @export
 */
export const ExerciseHistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExerciseHistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allPost(requestBody?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExerciseHistoryDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allPost(requestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExerciseHistoryApi.allPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePost(body?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePost(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExerciseHistoryApi.deletePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exerciseHistoryExerciseIdGet(exerciseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExerciseHistory>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exerciseHistoryExerciseIdGet(exerciseId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExerciseHistoryApi.exerciseHistoryExerciseIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exerciseHistoryPost(pageIndex?: number, pageSize?: number, requestBody?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExerciseHistoryDTOPaginatedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exerciseHistoryPost(pageIndex, pageSize, requestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExerciseHistoryApi.exerciseHistoryPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ExerciseHistoryApi - factory interface
 * @export
 */
export const ExerciseHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExerciseHistoryApiFp(configuration)
    return {
        /**
         * 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allPost(requestBody?: Array<string>, options?: any): AxiosPromise<Array<ExerciseHistoryDTO>> {
            return localVarFp.allPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost(body?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseHistoryExerciseIdGet(exerciseId: string, options?: any): AxiosPromise<Array<ExerciseHistory>> {
            return localVarFp.exerciseHistoryExerciseIdGet(exerciseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseHistoryPost(pageIndex?: number, pageSize?: number, requestBody?: Array<string>, options?: any): AxiosPromise<ExerciseHistoryDTOPaginatedResult> {
            return localVarFp.exerciseHistoryPost(pageIndex, pageSize, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExerciseHistoryApi - object-oriented interface
 * @export
 * @class ExerciseHistoryApi
 * @extends {BaseAPI}
 */
export class ExerciseHistoryApi extends BaseAPI {
    /**
     * 
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseHistoryApi
     */
    public allPost(requestBody?: Array<string>, options?: RawAxiosRequestConfig) {
        return ExerciseHistoryApiFp(this.configuration).allPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseHistoryApi
     */
    public deletePost(body?: string, options?: RawAxiosRequestConfig) {
        return ExerciseHistoryApiFp(this.configuration).deletePost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} exerciseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseHistoryApi
     */
    public exerciseHistoryExerciseIdGet(exerciseId: string, options?: RawAxiosRequestConfig) {
        return ExerciseHistoryApiFp(this.configuration).exerciseHistoryExerciseIdGet(exerciseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [pageIndex] 
     * @param {number} [pageSize] 
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciseHistoryApi
     */
    public exerciseHistoryPost(pageIndex?: number, pageSize?: number, requestBody?: Array<string>, options?: RawAxiosRequestConfig) {
        return ExerciseHistoryApiFp(this.configuration).exerciseHistoryPost(pageIndex, pageSize, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SessionApi - axios parameter creator
 * @export
 */
export const SessionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionActiveSessionUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiSessionActiveSessionUserIdGet', 'userId', userId)
            const localVarPath = `/api/session/active-session/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddSetRequest} [addSetRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionAddSetPost: async (addSetRequest?: AddSetRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/session/add-set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addSetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionAllSessionsUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiSessionAllSessionsUserIdGet', 'userId', userId)
            const localVarPath = `/api/session/all-sessions/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteSetRequest} [deleteSetRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionDeleteSetDelete: async (deleteSetRequest?: DeleteSetRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/session/delete-set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteSetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Session} [session] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionPost: async (session?: Session, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(session, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {AddExerciseToSessionRequest} [addExerciseToSessionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionSessionIdExercisePost: async (sessionId: string, addExerciseToSessionRequest?: AddExerciseToSessionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('apiSessionSessionIdExercisePost', 'sessionId', sessionId)
            const localVarPath = `/api/session/{sessionId}/exercise`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addExerciseToSessionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionSessionIdGet: async (sessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('apiSessionSessionIdGet', 'sessionId', sessionId)
            const localVarPath = `/api/session/{sessionId}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SessionApi - functional programming interface
 * @export
 */
export const SessionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SessionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSessionActiveSessionUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActiveSessionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSessionActiveSessionUserIdGet(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SessionApi.apiSessionActiveSessionUserIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {AddSetRequest} [addSetRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSessionAddSetPost(addSetRequest?: AddSetRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSessionAddSetPost(addSetRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SessionApi.apiSessionAddSetPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSessionAllSessionsUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Session>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSessionAllSessionsUserIdGet(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SessionApi.apiSessionAllSessionsUserIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {DeleteSetRequest} [deleteSetRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSessionDeleteSetDelete(deleteSetRequest?: DeleteSetRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSessionDeleteSetDelete(deleteSetRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SessionApi.apiSessionDeleteSetDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {Session} [session] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSessionPost(session?: Session, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionCreatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSessionPost(session, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SessionApi.apiSessionPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {AddExerciseToSessionRequest} [addExerciseToSessionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSessionSessionIdExercisePost(sessionId: string, addExerciseToSessionRequest?: AddExerciseToSessionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSessionSessionIdExercisePost(sessionId, addExerciseToSessionRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SessionApi.apiSessionSessionIdExercisePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSessionSessionIdGet(sessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSessionSessionIdGet(sessionId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SessionApi.apiSessionSessionIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SessionApi - factory interface
 * @export
 */
export const SessionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SessionApiFp(configuration)
    return {
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionActiveSessionUserIdGet(userId: string, options?: any): AxiosPromise<ActiveSessionResponse> {
            return localVarFp.apiSessionActiveSessionUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddSetRequest} [addSetRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionAddSetPost(addSetRequest?: AddSetRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiSessionAddSetPost(addSetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionAllSessionsUserIdGet(userId: string, options?: any): AxiosPromise<Array<Session>> {
            return localVarFp.apiSessionAllSessionsUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteSetRequest} [deleteSetRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionDeleteSetDelete(deleteSetRequest?: DeleteSetRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiSessionDeleteSetDelete(deleteSetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Session} [session] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionPost(session?: Session, options?: any): AxiosPromise<SessionCreatedResponse> {
            return localVarFp.apiSessionPost(session, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {AddExerciseToSessionRequest} [addExerciseToSessionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionSessionIdExercisePost(sessionId: string, addExerciseToSessionRequest?: AddExerciseToSessionRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiSessionSessionIdExercisePost(sessionId, addExerciseToSessionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionSessionIdGet(sessionId: string, options?: any): AxiosPromise<Session> {
            return localVarFp.apiSessionSessionIdGet(sessionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SessionApi - object-oriented interface
 * @export
 * @class SessionApi
 * @extends {BaseAPI}
 */
export class SessionApi extends BaseAPI {
    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public apiSessionActiveSessionUserIdGet(userId: string, options?: RawAxiosRequestConfig) {
        return SessionApiFp(this.configuration).apiSessionActiveSessionUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AddSetRequest} [addSetRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public apiSessionAddSetPost(addSetRequest?: AddSetRequest, options?: RawAxiosRequestConfig) {
        return SessionApiFp(this.configuration).apiSessionAddSetPost(addSetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public apiSessionAllSessionsUserIdGet(userId: string, options?: RawAxiosRequestConfig) {
        return SessionApiFp(this.configuration).apiSessionAllSessionsUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteSetRequest} [deleteSetRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public apiSessionDeleteSetDelete(deleteSetRequest?: DeleteSetRequest, options?: RawAxiosRequestConfig) {
        return SessionApiFp(this.configuration).apiSessionDeleteSetDelete(deleteSetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Session} [session] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public apiSessionPost(session?: Session, options?: RawAxiosRequestConfig) {
        return SessionApiFp(this.configuration).apiSessionPost(session, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} sessionId 
     * @param {AddExerciseToSessionRequest} [addExerciseToSessionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public apiSessionSessionIdExercisePost(sessionId: string, addExerciseToSessionRequest?: AddExerciseToSessionRequest, options?: RawAxiosRequestConfig) {
        return SessionApiFp(this.configuration).apiSessionSessionIdExercisePost(sessionId, addExerciseToSessionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} sessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public apiSessionSessionIdGet(sessionId: string, options?: RawAxiosRequestConfig) {
        return SessionApiFp(this.configuration).apiSessionSessionIdGet(sessionId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUser} [createUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreateUserPost: async (createUser?: CreateUser, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/create-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userNameUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userNameUserIdGet', 'userId', userId)
            const localVarPath = `/user/name/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SetUsernameRequest} [setUsernameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSetUsernamePost: async (setUsernameRequest?: SetUsernameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/set-username`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setUsernameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdatePost: async (body?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateWeekAndDayRequest} [updateWeekAndDayRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdateWeekAndDayPost: async (updateWeekAndDayRequest?: UpdateWeekAndDayRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/updateWeekAndDay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateWeekAndDayRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsernameUsernameGet: async (username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('userUsernameUsernameGet', 'username', username)
            const localVarPath = `/user/username/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userWeekAndDayUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userWeekAndDayUserIdGet', 'userId', userId)
            const localVarPath = `/user/week-and-day/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUser} [createUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCreateUserPost(createUser?: CreateUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCreateUserPost(createUser, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserApi.userCreateUserPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userNameUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userNameUserIdGet(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserApi.userNameUserIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {SetUsernameRequest} [setUsernameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSetUsernamePost(setUsernameRequest?: SetUsernameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userSetUsernamePost(setUsernameRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserApi.userSetUsernamePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userUpdatePost(body?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeekAndDayResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userUpdatePost(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserApi.userUpdatePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateWeekAndDayRequest} [updateWeekAndDayRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userUpdateWeekAndDayPost(updateWeekAndDayRequest?: UpdateWeekAndDayRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeekAndDayResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userUpdateWeekAndDayPost(updateWeekAndDayRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserApi.userUpdateWeekAndDayPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userUsernameUsernameGet(username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userUsernameUsernameGet(username, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserApi.userUsernameUsernameGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userWeekAndDayUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeekAndDayResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userWeekAndDayUserIdGet(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserApi.userWeekAndDayUserIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateUser} [createUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreateUserPost(createUser?: CreateUser, options?: any): AxiosPromise<void> {
            return localVarFp.userCreateUserPost(createUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userNameUserIdGet(userId: string, options?: any): AxiosPromise<string> {
            return localVarFp.userNameUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SetUsernameRequest} [setUsernameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSetUsernamePost(setUsernameRequest?: SetUsernameRequest, options?: any): AxiosPromise<void> {
            return localVarFp.userSetUsernamePost(setUsernameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdatePost(body?: string, options?: any): AxiosPromise<WeekAndDayResponse> {
            return localVarFp.userUpdatePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateWeekAndDayRequest} [updateWeekAndDayRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdateWeekAndDayPost(updateWeekAndDayRequest?: UpdateWeekAndDayRequest, options?: any): AxiosPromise<WeekAndDayResponse> {
            return localVarFp.userUpdateWeekAndDayPost(updateWeekAndDayRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUsernameUsernameGet(username: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.userUsernameUsernameGet(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userWeekAndDayUserIdGet(userId: string, options?: any): AxiosPromise<WeekAndDayResponse> {
            return localVarFp.userWeekAndDayUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {CreateUser} [createUser] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userCreateUserPost(createUser?: CreateUser, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userCreateUserPost(createUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userNameUserIdGet(userId: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userNameUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SetUsernameRequest} [setUsernameRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userSetUsernamePost(setUsernameRequest?: SetUsernameRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userSetUsernamePost(setUsernameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userUpdatePost(body?: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userUpdatePost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateWeekAndDayRequest} [updateWeekAndDayRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userUpdateWeekAndDayPost(updateWeekAndDayRequest?: UpdateWeekAndDayRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userUpdateWeekAndDayPost(updateWeekAndDayRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userUsernameUsernameGet(username: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userUsernameUsernameGet(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userWeekAndDayUserIdGet(userId: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userWeekAndDayUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VersionApi - axios parameter creator
 * @export
 */
export const VersionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VersionApi - functional programming interface
 * @export
 */
export const VersionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VersionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async versionGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.versionGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['VersionApi.versionGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * VersionApi - factory interface
 * @export
 */
export const VersionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VersionApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet(options?: any): AxiosPromise<void> {
            return localVarFp.versionGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VersionApi - object-oriented interface
 * @export
 * @class VersionApi
 * @extends {BaseAPI}
 */
export class VersionApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    public versionGet(options?: RawAxiosRequestConfig) {
        return VersionApiFp(this.configuration).versionGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkoutApi - axios parameter creator
 * @export
 */
export const WorkoutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<CompleteExerciseRequest>} [completeExerciseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workoutCompleteMultiplePost: async (completeExerciseRequest?: Array<CompleteExerciseRequest>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workout/complete-multiple`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(completeExerciseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CompleteExerciseRequest} [completeExerciseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workoutCompletePost: async (completeExerciseRequest?: CompleteExerciseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workout/complete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(completeExerciseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workoutGenerateDummyGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workout/GenerateDummy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateWorkoutRequest} [createWorkoutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workoutPost: async (createWorkoutRequest?: CreateWorkoutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWorkoutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workoutUserIdAllGet: async (userId: string, pageIndex?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('workoutUserIdAllGet', 'userId', userId)
            const localVarPath = `/workout/{userId}/all`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {number} week 
         * @param {number} day 
         * @param {boolean} completed 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workoutUserIdWeekDayCompletedGet: async (userId: string, week: number, day: number, completed: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('workoutUserIdWeekDayCompletedGet', 'userId', userId)
            // verify required parameter 'week' is not null or undefined
            assertParamExists('workoutUserIdWeekDayCompletedGet', 'week', week)
            // verify required parameter 'day' is not null or undefined
            assertParamExists('workoutUserIdWeekDayCompletedGet', 'day', day)
            // verify required parameter 'completed' is not null or undefined
            assertParamExists('workoutUserIdWeekDayCompletedGet', 'completed', completed)
            const localVarPath = `/workout/{userId}/{week}/{day}/{completed}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"week"}}`, encodeURIComponent(String(week)))
                .replace(`{${"day"}}`, encodeURIComponent(String(day)))
                .replace(`{${"completed"}}`, encodeURIComponent(String(completed)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workoutUserIdWorkoutsGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('workoutUserIdWorkoutsGet', 'userId', userId)
            const localVarPath = `/workout/{userId}/workouts`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkoutApi - functional programming interface
 * @export
 */
export const WorkoutApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkoutApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Array<CompleteExerciseRequest>} [completeExerciseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workoutCompleteMultiplePost(completeExerciseRequest?: Array<CompleteExerciseRequest>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExerciseCompletionResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workoutCompleteMultiplePost(completeExerciseRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutApi.workoutCompleteMultiplePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CompleteExerciseRequest} [completeExerciseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workoutCompletePost(completeExerciseRequest?: CompleteExerciseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExerciseCompletionResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workoutCompletePost(completeExerciseRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutApi.workoutCompletePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workoutGenerateDummyGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workoutGenerateDummyGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutApi.workoutGenerateDummyGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CreateWorkoutRequest} [createWorkoutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workoutPost(createWorkoutRequest?: CreateWorkoutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkoutCreationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workoutPost(createWorkoutRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutApi.workoutPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workoutUserIdAllGet(userId: string, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWorkoutResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workoutUserIdAllGet(userId, pageIndex, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutApi.workoutUserIdAllGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {number} week 
         * @param {number} day 
         * @param {boolean} completed 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workoutUserIdWeekDayCompletedGet(userId: string, week: number, day: number, completed: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWorkoutResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workoutUserIdWeekDayCompletedGet(userId, week, day, completed, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutApi.workoutUserIdWeekDayCompletedGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workoutUserIdWorkoutsGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Workout>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workoutUserIdWorkoutsGet(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutApi.workoutUserIdWorkoutsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * WorkoutApi - factory interface
 * @export
 */
export const WorkoutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkoutApiFp(configuration)
    return {
        /**
         * 
         * @param {Array<CompleteExerciseRequest>} [completeExerciseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workoutCompleteMultiplePost(completeExerciseRequest?: Array<CompleteExerciseRequest>, options?: any): AxiosPromise<ExerciseCompletionResult> {
            return localVarFp.workoutCompleteMultiplePost(completeExerciseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompleteExerciseRequest} [completeExerciseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workoutCompletePost(completeExerciseRequest?: CompleteExerciseRequest, options?: any): AxiosPromise<ExerciseCompletionResult> {
            return localVarFp.workoutCompletePost(completeExerciseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workoutGenerateDummyGet(options?: any): AxiosPromise<void> {
            return localVarFp.workoutGenerateDummyGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateWorkoutRequest} [createWorkoutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workoutPost(createWorkoutRequest?: CreateWorkoutRequest, options?: any): AxiosPromise<WorkoutCreationResult> {
            return localVarFp.workoutPost(createWorkoutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workoutUserIdAllGet(userId: string, pageIndex?: number, pageSize?: number, options?: any): AxiosPromise<GetWorkoutResult> {
            return localVarFp.workoutUserIdAllGet(userId, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {number} week 
         * @param {number} day 
         * @param {boolean} completed 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workoutUserIdWeekDayCompletedGet(userId: string, week: number, day: number, completed: boolean, options?: any): AxiosPromise<GetWorkoutResult> {
            return localVarFp.workoutUserIdWeekDayCompletedGet(userId, week, day, completed, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workoutUserIdWorkoutsGet(userId: string, options?: any): AxiosPromise<Array<Workout>> {
            return localVarFp.workoutUserIdWorkoutsGet(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkoutApi - object-oriented interface
 * @export
 * @class WorkoutApi
 * @extends {BaseAPI}
 */
export class WorkoutApi extends BaseAPI {
    /**
     * 
     * @param {Array<CompleteExerciseRequest>} [completeExerciseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutApi
     */
    public workoutCompleteMultiplePost(completeExerciseRequest?: Array<CompleteExerciseRequest>, options?: RawAxiosRequestConfig) {
        return WorkoutApiFp(this.configuration).workoutCompleteMultiplePost(completeExerciseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompleteExerciseRequest} [completeExerciseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutApi
     */
    public workoutCompletePost(completeExerciseRequest?: CompleteExerciseRequest, options?: RawAxiosRequestConfig) {
        return WorkoutApiFp(this.configuration).workoutCompletePost(completeExerciseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutApi
     */
    public workoutGenerateDummyGet(options?: RawAxiosRequestConfig) {
        return WorkoutApiFp(this.configuration).workoutGenerateDummyGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateWorkoutRequest} [createWorkoutRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutApi
     */
    public workoutPost(createWorkoutRequest?: CreateWorkoutRequest, options?: RawAxiosRequestConfig) {
        return WorkoutApiFp(this.configuration).workoutPost(createWorkoutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {number} [pageIndex] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutApi
     */
    public workoutUserIdAllGet(userId: string, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return WorkoutApiFp(this.configuration).workoutUserIdAllGet(userId, pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {number} week 
     * @param {number} day 
     * @param {boolean} completed 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutApi
     */
    public workoutUserIdWeekDayCompletedGet(userId: string, week: number, day: number, completed: boolean, options?: RawAxiosRequestConfig) {
        return WorkoutApiFp(this.configuration).workoutUserIdWeekDayCompletedGet(userId, week, day, completed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutApi
     */
    public workoutUserIdWorkoutsGet(userId: string, options?: RawAxiosRequestConfig) {
        return WorkoutApiFp(this.configuration).workoutUserIdWorkoutsGet(userId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkoutExerciseApi - axios parameter creator
 * @export
 */
export const WorkoutExerciseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UpdateExerciseRequest} [updateExerciseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workoutExerciseUpdatePut: async (updateExerciseRequest?: UpdateExerciseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workout-exercise/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateExerciseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkoutExerciseApi - functional programming interface
 * @export
 */
export const WorkoutExerciseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkoutExerciseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UpdateExerciseRequest} [updateExerciseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workoutExerciseUpdatePut(updateExerciseRequest?: UpdateExerciseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workoutExerciseUpdatePut(updateExerciseRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutExerciseApi.workoutExerciseUpdatePut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * WorkoutExerciseApi - factory interface
 * @export
 */
export const WorkoutExerciseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkoutExerciseApiFp(configuration)
    return {
        /**
         * 
         * @param {UpdateExerciseRequest} [updateExerciseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workoutExerciseUpdatePut(updateExerciseRequest?: UpdateExerciseRequest, options?: any): AxiosPromise<number> {
            return localVarFp.workoutExerciseUpdatePut(updateExerciseRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkoutExerciseApi - object-oriented interface
 * @export
 * @class WorkoutExerciseApi
 * @extends {BaseAPI}
 */
export class WorkoutExerciseApi extends BaseAPI {
    /**
     * 
     * @param {UpdateExerciseRequest} [updateExerciseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutExerciseApi
     */
    public workoutExerciseUpdatePut(updateExerciseRequest?: UpdateExerciseRequest, options?: RawAxiosRequestConfig) {
        return WorkoutExerciseApiFp(this.configuration).workoutExerciseUpdatePut(updateExerciseRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



